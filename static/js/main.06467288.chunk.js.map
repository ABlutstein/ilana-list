{"version":3,"sources":["components/forms/AddTaskForm.js","components/forms/EditTaskForm.js","components/tables/TaskTable.js","App.js","serviceWorker.js","index.js"],"names":["AddTaskForm","addTask","initialFormState","id","name","completed","useState","task","setTask","className","align","onSubmit","event","preventDefault","type","placeholder","value","onChange","currentTarget","EditTaskForm","updateTask","setEditing","currentTask","useEffect","target","onClick","TaskTable","deleteTask","editRow","tasks","handleChange","scope","length","map","key","defaultChecked","data-task","data-updateTask","colSpan","App","setTasks","editing","setCurrentTask","currenTarget","dataset","updatedTask","filter","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.06467288.chunk.js","sourcesContent":["import React, { useState } from \"react\";\nimport \"./forms.css\";\n\nconst AddTaskForm = ({ addTask }) => {\n  const initialFormState = {\n    id: null,\n    name: \"\",\n    completed: \"\"\n  };\n  const [task, setTask] = useState(initialFormState);\n\n  const handleInputChange = event => {\n    const { name, value } = event.currentTarget;\n    setTask({\n      ...task,\n      [name]: value\n    });\n  };\n\n  const handleSubmit = event => {\n    event.preventDefault();\n    if (!task.name) return;\n\n    addTask(task);\n\n    setTask(initialFormState);\n  };\n\n  return (\n    <form className=\"form-inLine\" align=\"center\" onSubmit={handleSubmit}>\n      <label className=\"sub-head\"></label>\n      <input\n        type=\"text\"\n        className=\"textEnter\"\n        name=\"name\"\n        placeholder=\"Enter your task here\"\n        value={task.name}\n        onChange={handleInputChange}\n      />\n      <button className=\"button1\">Add new task</button>\n    </form>\n  );\n};\n\nexport default AddTaskForm;\n","import React, { useState, useEffect } from \"react\";\nimport \"./forms.css\";\n\nconst EditTaskForm = ({ updateTask, setEditing, currentTask }) => {\n  const [task, setTask] = useState(currentTask);\n\n  useEffect(() => {\n    setTask(currentTask);\n  }, [currentTask]);\n\n  const handleInputChange = event => {\n    const { name, value } = event.target;\n\n    setTask({ ...task, [name]: value });\n  };\n\n  const handleSubmit = event => {\n    event.preventDefault();\n    if (!task.name) return;\n    updateTask(task, task);\n  };\n\n  return (\n    <form className=\"form-inLine\" align=\"center\" onSubmit={handleSubmit}>\n      <label className=\"sub-head\"></label>\n      <input\n        type=\"text\"\n        className=\"updateEnter\"\n        placeholder=\"Edit your task here\"\n        name=\"name\"\n        value={task.name}\n        onChange={handleInputChange}\n      />\n      <button className=\"button1\">Update task</button>\n      <button className=\"button1\" onClick={() => setEditing(false)}>\n        Cancel\n      </button>\n    </form>\n  );\n};\n\nexport default EditTaskForm;\n","import React from \"react\";\nimport \"./tables.css\";\n\nconst TaskTable = ({ id, deleteTask, editRow, tasks, handleChange }) => {\n  return (\n    <table className=\"table-1\">\n      <thead align=\"center\">\n        <tr>\n          <th className=\"completeTab\" scope=\"col\">\n            Completed\n          </th>\n          <th className=\"taskTab\" scope=\"col\">\n            Task\n          </th>\n          <th className=\"actionsTab\" scope=\"col\">\n            Actions\n          </th>\n        </tr>\n      </thead>\n      <tbody align=\"center\">\n        {tasks.length > 0 ? (\n          tasks.map(task => (\n            <tr key={task.id}>\n              <td className=\"align-middle\">\n                <input\n                  className=\"tickBox\"\n                  type=\"checkbox\"\n                  defaultChecked={task.completed}\n                  setEditing={false}\n                  data-task={id}\n                  data-updateTask={task}\n                  onClick={handleChange}\n                />\n              </td>\n              <td className=\"align-middle\">\n                {task.completed === true ? <del>{task.name}</del> : task.name}\n              </td>\n              <td>\n                <button\n                  type=\"button\"\n                  className=\"editButton\"\n                  data-task={id}\n                  onClick={editRow}\n                >\n                  Edit\n                </button>\n                <button\n                  type=\"button\"\n                  className=\"deleteButton\"\n                  data-task={id}\n                  onClick={deleteTask}\n                >\n                  Delete\n                </button>\n              </td>\n            </tr>\n          ))\n        ) : (\n          <tr>\n            <td colSpan={3}>No tasks today</td>\n          </tr>\n        )}\n      </tbody>\n    </table>\n  );\n};\n\nexport default TaskTable;\n","import React, { useState } from \"react\";\nimport AddTaskForm from \"./components/forms/AddTaskForm\";\nimport EditTaskForm from \"./components/forms/EditTaskForm\";\nimport TaskTable from \"./components/tables/TaskTable\";\nimport \"./App.css\";\n\nconst App = () => {\n  const [tasks, setTasks] = useState([\n    {\n      id: 1,\n      name: \"Tidy up\",\n      completed: false\n    },\n    {\n      id: 2,\n      name: \"Feed pippi\",\n      completed: false\n    },\n    {\n      id: 3,\n      name: \"Eat chocolate\",\n      completed: false\n    }\n  ]);\n\n  const [editing, setEditing] = useState(false);\n\n  const initialFormState = {\n    id: null,\n    name: \"\",\n    completed: \"\"\n  };\n\n  const [currentTask, setCurrentTask] = useState(initialFormState);\n\n  const addTask = task => {\n    task.id = tasks.length;\n    setTasks([...tasks, task]);\n  };\n\n  const deleteTask = event => {\n    setEditing(false);\n    setTasks(\n      tasks.filter(task => event.currentTarget.dataset.task !== task.id)\n    );\n  };\n\n  const handleChange = (task, event) => {\n    if (task => event.currentTarget.dataset.task === task.id) {\n      task.completed = !task.completed;\n    }\n    return task;\n  };\n\n  const updateTask = event => {\n    setTasks(\n      tasks.map(task =>\n        event.currenTarget.dataset.task.id\n          ? event.currentTarget.dataset.updatedTask\n          : task\n      )\n    );\n  };\n\n  const editRow = task => {\n    setEditing(true);\n    setCurrentTask({\n      id: task.id,\n      name: task.name,\n      completed: task.completed\n    });\n  };\n\n  return (\n    <div className=\"container\">\n      <h1>What do I have to do today?</h1>\n      <div>\n        <div>\n          {editing ? (\n            <div>\n              <EditTaskForm\n                editing={editing}\n                setEditing={setEditing}\n                currentTask={currentTask}\n                updateTask={updateTask}\n              />\n            </div>\n          ) : (\n            <div>\n              <AddTaskForm addTask={addTask} />\n            </div>\n          )}\n        </div>\n\n        <div>\n          <TaskTable\n            tasks={tasks}\n            editRow={editRow}\n            deleteTask={deleteTask}\n            handleChange={handleChange}\n          />\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}